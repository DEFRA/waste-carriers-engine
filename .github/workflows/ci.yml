name: CI

on: push

jobs:
  build:
    # You must use a Linux environment when using service containers or container jobs
    runs-on: ubuntu-24.04
    env:
      NOTIFY_API_KEY: ${{ secrets.NOTIFY_API_KEY }}
      WCRS_REGISTRATION_EXPIRES_AFTER: 3
      WCRS_REGISTRATION_RENEWAL_WINDOW: 3
      WCRS_REGISTRATION_GRACE_WINDOW: 5
      WCRS_RENEWAL_CHARGE: 10500
      WCRS_NEW_REGISTRATION_CHARGE: 15400
      WCRS_TYPE_CHANGE_CHARGE: 4000
      WCRS_CARD_CHARGE: 500
      WCRS_USE_AIRBRAKE: true
      WCRS_MOCK_ENABLED: true
      # Just used to make the tests pass
      WCRS_WORLDPAY_ECOM_USERNAME: foo
      WCRS_WORLDPAY_ECOM_PASSWORD: foo
      WCRS_USE_XVFB_FOR_WICKEDPDF: true
      ENV_VARIABLE_TEST_FEATURE: true
      WCRS_GOVPAY_CALLBACK_WEBHOOK_SIGNING_SECRET: foo
      WCRS_GOVPAY_BACK_OFFICE_CALLBACK_WEBHOOK_SIGNING_SECRET: foo2

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of sonarcloud analysis

      # Install various other dependencies
      # Python is required for mlaunch, which we use to start a MongoDB cluster
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install xvfb -y
          sudo apt-get install wkhtmltopdf -y

          #



          # Create a temporary directory for APT configuration and GPG key
          TMP_DIR=$(mktemp -d)
          echo "TMP_DIR: $TMP_DIR"

          # Download the MongoDB GPG key into the temporary directory
          curl -fsSL https://pgp.mongodb.com/server-6.0.asc -o "$TMP_DIR/mongodb-server-6.0.gpg"
          echo "MongoDB GPG key downloaded to $TMP_DIR/mongodb-server-6.0.gpg"

          # Create the MongoDB APT source list file in the temporary directory
          echo "deb [arch=amd64,arm64 signed-by=$TMP_DIR/mongodb-server-6.0.gpg] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" > "$TMP_DIR/mongodb-org-6.0.list"
          echo "MongoDB repository list created in $TMP_DIR/mongodb-org-6.0.list"

          # Debugging step: Check the repository list file contents
          echo "Contents of $TMP_DIR/mongodb-org-6.0.list:"
          cat "$TMP_DIR/mongodb-org-6.0.list"

          # Ensure the GPG key is used directly from the temporary directory (no copy to /usr/share/keyrings)
          # Use APT's 'signed-by' option directly from the temporary directory

          # Update the APT repository list using the custom list and GPG key from TMP_DIR
          sudo apt-get update -o Dir::Etc::sourcelist="$TMP_DIR/mongodb-org-6.0.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"

          # Install MongoDB from the custom repository
          sudo apt-get install -y -o Dir::Etc::sourcelist="$TMP_DIR/mongodb-org-6.0.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" mongodb-org mongodb-org-shell mongodb-org-server mongodb-org-mongos



          #

          sudo apt-get install -qq python3 python3-pip
          sudo pip3 install mtools[mlaunch]

      # This action uses the ruby version specified in .ruby-version
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - name: Set up databases
        run: |
          mlaunch --replicaset --name wcrepl --auth --username mongoAdmin --password password1234
          mongo "mongodb://mongoAdmin:password1234@localhost:27017,localhost:27018,localhost:27019/waste-carriers-test?authSource=admin&replicaSet=wcrepl" --eval 'db.createUser({user:"mongoUser", pwd:"password1234", roles:["readWrite", "dbAdmin", "userAdmin"]})'
          mongo "mongodb://mongoAdmin:password1234@localhost:27017,localhost:27018,localhost:27019/waste-carriers-users-test?authSource=admin&replicaSet=wcrepl" --eval 'db.createUser({user:"mongoUser", pwd:"password1234", roles:["readWrite", "dbAdmin", "userAdmin"]})'

      # Run linting first. No point running the tests if there is a linting issue
      - name: Run lint check
        run: |
          bundle exec rubocop --format progress --format json --out rubocop-result.json

      # This includes an extra run step. The sonarcloud analysis will be run in a docker container with the current
      # folder mounted as `/github/workspace`. The problem is when the coverage.json file is generated it will
      # reference the code in the current folder. So to enable sonarcloud to matchup code coverage with the files we use
      # sed to update the references in coverage.json
      # https://community.sonarsource.com/t/code-coverage-doesnt-work-with-github-action/16747/6
      - name: Run unit tests
        run: |
          bundle exec rspec

      - name: Update coverage output
        run: |
          sed -i "s@/home/runner/work/DEFRA/pafs_core@/github/workspace@g" coverage/coverage.json

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This is provided automatically by GitHub
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # This needs to be set in your repo; settings -> secrets
